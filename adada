-- Whitelisted PlaceIds
local allowedPlaceIds = {
    [2788229376] = true,
}

-- Wait for game to load
repeat task.wait() until game:IsLoaded()

-- Abort if not in allowed game
if not allowedPlaceIds[game.PlaceId] then return end

-- Services and Player
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Metatable Bypass Kick
local mt = getrawmetatable(game)
local backup = mt.__namecall

setreadonly(mt, false)

mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    if not checkcaller() and self == LocalPlayer and method == "Kick" then
        warn("[Bypass] Blocked Kick Attempt.")
        return nil
    end
    return backup(self, ...)
end)

setreadonly(mt, true)

-- Safe fenv Hook (optional, some executors don't allow this)
local envFuncs = getrenv and getrenv().getfenv
if typeof(envFuncs) == "function" and hookfunction then
    hookfunction(envFuncs, newcclosure(function(level)
        if not checkcaller() then
            return {} -- block unauthorized use
        end
        return envFuncs(level)
    end))
end
